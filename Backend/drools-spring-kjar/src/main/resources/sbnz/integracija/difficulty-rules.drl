package sbnz.integracija;

import yugioh_recommend.model.*;
import yugioh_recommend.dto.*;

rule "Determine Deck Difficulty - Easy"
	when
		$areq: ArchetypeRequest(chosenDifficulty > 0 && chosenDifficulty <= 3)
	then
		modify($areq) {setDifficulty(Difficulty.Easy)}
end
	
rule "Determine Deck Difficulty - Medium"
	when
		$areq: ArchetypeRequest(chosenDifficulty >= 4 && chosenDifficulty <= 6)
	then
		modify($areq) {setDifficulty(Difficulty.Medium)}
end
	
rule "Determine Deck Difficulty - Hard"
	when
		$areq: ArchetypeRequest(chosenDifficulty >= 7 && chosenDifficulty <= 9)
	then
		modify($areq) {setDifficulty(Difficulty.Hard)}
end
	
rule "Determine Deck Difficulty - Master"
	when
		$areq: ArchetypeRequest(chosenDifficulty >= 10 && chosenDifficulty <= 12)
	then
		modify($areq) {setDifficulty(Difficulty.Master)}
end
		
		
rule "Temp Sub-Type Rule - Easy & Normal Sub-Type"
	salience 2
	when
		$areq: ArchetypeRequest(difficulty == Difficulty.Easy && chosenSubTypes contains SubType.Normal)
	then
		float cs = $areq.getCurrentScore();
		modify($areq) {setCurrentScore(cs + 0.5)}
end

rule "Temp Type Rule - Number Of Types In Archetype"
	when
		$ct: ArrayList();
		$tt: ArrayList();
		$areq: ArchetypeRequest($chosenTypes: chosenTypes)
		$aresp: ArchetypeResponse($currentScore: currentScore, $types: typesInDeck);
		$value: Number() from accumulate
			(
				Type($type: this) from $types,
			init
				(
					float count = 0;
				),
				action
				(
					count += 1f;
				),
				result
				(
					count
			    )
			)
				
	then
		float count = (float)$value.floatValue();
		for(int i = 0; i < $ct.size(); ++i){
			Type cType = (Type)$ct.get(i);
			for(int j = 0; j < $tt.size(); ++j){	
				Type tType = (Type)$tt.get(j);
				if(cType.equals(tType)){
					if(count == 1){
						float cs = $areq.getCurrentScore();
						modify($aresp) {setCurrentScore(cs + 0.5)}
					}else if($types.size() == count){
						modify($aresp){setCurrentScore(cs + (0.3 * count))}
					}
				} 
			}
		}
end

		
		