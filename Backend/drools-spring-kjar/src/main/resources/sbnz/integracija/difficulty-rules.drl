package sbnz.integracija;

import yugioh_recommend.model.*;
import yugioh_recommend.dto.*;
import yugioh_recommend.facts.*;

rule "Determine Deck Difficulty - Easy"
	salience 100
	agenda-group "determine_difficulty"
	when
		$areq: ArchetypeRequest(chosenDifficulty > 0 && chosenDifficulty <= 3)
	then
		modify($areq) {setDifficulty(Difficulty.Easy)}
end
	
rule "Determine Deck Difficulty - Medium"
	salience 100
	agenda-group "determine_difficulty"
	when
		$areq: ArchetypeRequest(chosenDifficulty >= 4 && chosenDifficulty <= 6)
	then
		modify($areq) {setDifficulty(Difficulty.Medium)}
end
	
rule "Determine Deck Difficulty - Hard"
	salience 100
	agenda-group "determine_difficulty"
	when
		$areq: ArchetypeRequest(chosenDifficulty >= 7 && chosenDifficulty <= 9)
	then
		modify($areq) {setDifficulty(Difficulty.Hard)}
end
	
rule "Determine Deck Difficulty - Master"
	salience 100
	agenda-group "determine_difficulty"
	when
		$areq: ArchetypeRequest(chosenDifficulty >= 10 && chosenDifficulty <= 12)
	then
		modify($areq) {setDifficulty(Difficulty.Master)}
end

rule "Deck Difficulty Scoring"
	salience 80
	agenda-group "determine_difficulty_score"
	no-loop
	when
		$areq: ArchetypeRequest($difficulty: difficulty)
		$fact: Facts($respList: arList)
		$value: Number() from accumulate
        (
            ArchetypeResponse($aresp: this) from $respList,
            init
            (
                int count = 0;
            ),
            action
            (	
            	double currentScore = $aresp.getCurrentScore();
                if($difficulty == $aresp.getDeckDifficulty()){
                	count += 1;
                	$aresp.setCurrentScore(count * 0.5);      
                	count = 0;  	
                }     
            ),
            result
            (	
            	count
            )
        )
	then
		modify($fact) {setArList($respList)}
end