package sbnz.integracija;

import yugioh_recommend.model.*;
import yugioh_recommend.dto.*;


rule "Type Rule - Number Of Types In Archetype"
	salience 100
	agenda-group "type_rules"
	when
		$areq: ArchetypeRequest($chosenTypes: chosenTypes)
		$aresp: ArchetypeResponse($types: typesInDeck)
		$value: Number() from accumulate
			(
				Type($type: this) from $types,
			init
				(
					int count = 0;
				),
				action
				(
					count += 1;
				),
				result
				(
					count
			    )
			)
				
	then
		int count = $value.intValue();
		modify($aresp){setNumberOfTypes(count)}
		
end

rule "Type Rule - Score For Types"
	salience 70
	agenda-group "type_rules"
	when
		$areq: ArchetypeRequest($noct: numberOfChosenTypes)
		$aresp: ArchetypeResponse($subs: subs, $types: typesInDeck)
		$fact: Facts($bonus: bonus)
		$value: Number() from accumulate
        (
            Type($type: this) from $types,
            init
            (
                int count = 0;
            ),
            action
            (	
                if($areq.getChosenTypes().contains($type)){
                	if($noct == 1){
                		$fact.setBonus(2);
                	}else{
                    	count += 1;
                    }
                }
            ),
            result
            (
                count
            )
        )
	then
		int count = $value.intValue();
		double currentScore = $aresp.getCurrentScore();
		double bonus = $fact.getBonus();
		double newScore = currentScore + (count * 0.3) + bonus;
		$fact.setBonus(0);
		modify($aresp) {setCurrentScore(newScore)}
end
